import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'



sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'

    implementation 'com.microsoft.azure:azure-eventhubs:2.3.2'
    implementation 'com.microsoft.azure:qpid-proton-j-extensions:1.2.4'
    implementation 'com.microsoft.azure:azure-eventhubs-eph:2.5.2'
    implementation 'com.microsoft.azure:azure-storage:8.6.6'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.qpid:proton-j:0.33.9'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0' // provided by Logstash
}


task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-azure_event_hubs.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtimeClasspath.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtimeClasspath.allDependencies.each { dep ->
            File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}" + File.separator + "${dep.name}" + File.separator + "${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}" + File.separator + "${groupPath}" + File.separator + "${dep.name}"+ File.separator + "${dep.version}" + File.separator + "${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
    }
}

vendor.dependsOn(generateGemJarRequiresFile)

